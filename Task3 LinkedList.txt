class Node<T>
{
    public T Value { get; set; }
    public int? Next { get; set; }
    public Node(T value, int? next = null)
    {
        Value = value;
        Next = next;
    }
}
class ArrayBasedLinkedList<T>
{
    private Node<T>[] array;
    private int? head;
    private int size;
    private int capacity;
    public ArrayBasedLinkedList(int capacity = 100)
    {
        this.capacity = capacity;
        array = new Node<T>[capacity];
        head = null;
        size = 0;
    }
    private int? FindFreeIndex()
    {
        for (int i = 0; i < capacity; i++)
        {
            if (array[i] == null) return i;
        }
        return null;
    }
    public void AddFirst(T value)
    {
        int? newIndex = FindFreeIndex();
        if (newIndex == null)
        {
            throw new InvalidOperationException("No available space in the list");
        }
        var newNode = new Node<T>(value, head);
        array[(int)newIndex] = newNode;
        head = newIndex;
        size++;
    }
    public int Size()
    {
        return size;
    }
    public void PrintList()
    {
        int? currentIndex = head;
        while (currentIndex != null)
        {
            Console.WriteLine(array[(int)currentIndex].Value);
            currentIndex = array[(int)currentIndex].Next;
        }
    }
}
class Program
{
    static void Main(string[] args)
    {
        ArrayBasedLinkedList<int> list = new ArrayBasedLinkedList<int>(10);
        list.AddFirst(10);
        list.AddFirst(20);
        list.AddFirst(30);
        Console.WriteLine("Linked List elements:");
        list.PrintList();
    }
}